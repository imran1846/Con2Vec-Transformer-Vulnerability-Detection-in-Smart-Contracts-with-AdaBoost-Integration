import subprocess
import os
from gensim.models import Word2Vec
import numpy as np

# Example smart contract
smart_contract = """
pragma solidity ^0.8.0;

contract SimpleContract {
    uint256 public value;

    function setValue(uint256 _value) public {
        value = _value;
    }

    function getValue() public view returns (uint256) {
        return value;
    }
}
"""

# Save the smart contract to a file
with open('SimpleContract.sol', 'w') as f:
    f.write(smart_contract)

# Compile the smart contract to generate bytecode
subprocess.run(['solc', '--bin', 'SimpleContract.sol', '-o', 'output'])

# Read the generated bytecode
with open('output/SimpleContract.bin', 'r') as f:
    bytecode = f.read().strip()

# Use a disassembly tool to convert bytecode into opcodes (assume evmdasm is installed)
subprocess.run(['evmdasm', 'output/SimpleContract.bin', '-o', 'output/SimpleContract.opcodes'])

# Read the generated opcodes
with open('output/SimpleContract.opcodes', 'r') as f:
    opcodes = f.read().strip().split('\n')

# Tokenize the opcodes
opcode_tokens = [opcode.split()[0] for opcode in opcodes]

# Convert opcodes to embeddings using Word2Vec
model = Word2Vec([opcode_tokens], vector_size=50, window=5, min_count=1, workers=4)
opcode_embeddings = [model.wv[opcode] for opcode in opcode_tokens]

# Aggregate opcode embeddings to form Contract2Vec embedding
def aggregate_embeddings(embeddings):
    return np.mean(embeddings, axis=0)

contract_embedding = aggregate_embeddings(opcode_embeddings)

print("Contract2Vec Embedding (Opcode-Based):", contract_embedding)




