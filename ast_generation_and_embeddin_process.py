import ast
import numpy as np
from gensim.models import Word2Vec

# Example smart contract
smart_contract = """
pragma solidity ^0.8.0;

contract SimpleContract {
    uint256 public value;

    function setValue(uint256 _value) public {
        value = _value;
    }

    function getValue() public view returns (uint256) {
        return value;
    }
}
"""

# Parse the smart contract source code to generate the AST
parsed_ast = ast.parse(smart_contract)

# Function to traverse the AST and extract features from each node
def extract_features(node, features):
    node_type = type(node).__name__
    features.append(node_type)
    for child in ast.iter_child_nodes(node):
        extract_features(child, features)
    return features

# Extract features from the AST
features = extract_features(parsed_ast, [])

# Convert features to node embeddings using Word2Vec
model = Word2Vec([features], vector_size=50, window=5, min_count=1, workers=4)
node_embeddings = {word: model.wv[word] for word in model.wv.index_to_key}

# Aggregate node embeddings to form the Contract2Vec embedding
def aggregate_embeddings(node, node_embeddings):
    node_type = type(node).__name__
    embedding = node_embeddings.get(node_type, np.zeros(50))
    child_embeddings = [
        aggregate_embeddings(child, node_embeddings)
        for child in ast.iter_child_nodes(node)
    ]
    if child_embeddings:
        return embedding + np.mean(child_embeddings, axis=0)
    else:
        return embedding

contract_embedding = aggregate_embeddings(parsed_ast, node_embeddings)

print("Contract2Vec Embedding (AST-Based):", contract_embedding)
